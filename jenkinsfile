pipeline {
    agent any
    
    environment {
        ENV_VARS = credentials('react-env-vars')
        CI = 'false'
        AWS_CREDENTIAL = credentials('aws-credentials')
        CLOUDFRONT = credentials('cloudfrontId')
        FEBUCKET = credentials('bucket')
        REGION = credentials('aws-region')
        FEGITHUB = credentials('fe-github')
        GCP_BUCKET = credentials('gcp-bucket')
        GCP_CREDENTIAL = 'gcpCredentials'
    }
    
    stages {
        stage('Git Clone') {
            steps {
                git(
                    url: env.FEGITHUB,
                    branch: 'feat/92'
                )
            }
        }
        
        stage('Prepare Environment') {
            steps {
                script {
                    def envContent = readFile(file: env.ENV_VARS)
                    writeFile file: '.env', text: envContent
                    sh 'ls -la .env'
                }
            }
        }
        
        stage('React Build') {
            tools {
                nodejs '18.3.1'  
            }
            steps {
                dir('FE pipeline') {  
                    sh 'CI=false npm install'
                    sh 'CI=false npm run build'
                }
            }
        }

        stage('sonarqube') {
            steps {
                script {
                    def scannerHome = tool 'sonarqube'
                    withSonarQubeEnv(credentialsId: "fe-jenkins-token", installationName: 'SonarServer') {
                          sh """
                    ${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=weer-FE \
                    """
                    }
                }
            }
        }

        stage('S3 Upload Test') {
            steps {
                dir('build') {
                    withAWS(credentials: env.AWS_CREDENTIAL, region: env.REGION) {
                     sh '''
                echo "Testing single file upload..."
                aws s3 cp index.html ${FEBUCKET}/index.html
                
                if [ $? -eq 0 ]; then
                    echo "Single file upload successful, uploading all files..."
                    aws s3 cp . ${FEBUCKET}/ --recursive
                else
                    echo "Single file upload failed"
                    exit 1
                fi
            '''
                }
}
            }
        }

        stage('Store to GCS'){
            steps{
                script{
                    googleStorageUpload(
                        credentialsId: env.GCP_CREDENTIAL,
                        bucket: "gs://${env.GCP_BUCKET}",
                        pattern: 'build/**/*',
                        pathPrefix: 'build', // 'build/' 경로를 제거하여 루트에 업로드
                        flatten: true
                    )
                }
            }
        }
        
        stage('CloudFront Invalidation') {
            steps {
                sh 'aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT} --paths "/*"'
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace'
        }
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed'
        }
    }
}
